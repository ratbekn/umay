// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "@openzeppelin/contracts/access/Ownable.sol";
import "./InvestmentPool.sol";

/// @title InvestmentFactory
/// @notice –ö–æ–Ω—Ç—Ä–∞–∫—Ç-—Ñ–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö –ø—É–ª–æ–≤ (–æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤)
/// @dev –ö–∞–∂–¥—ã–π –ø—É–ª —Å–æ–∑–¥–∞—ë—Ç—Å—è –ø–æ —à–∞–±–ª–æ–Ω—É InvestmentPool –∏ —Ö—Ä–∞–Ω–∏—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
contract InvestmentFactory is Ownable {
    /// @notice –ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ USDT, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
    address public immutable usdt;

    /// @notice –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø—É–ª–æ–≤
    address[] public allPools;

    /// @notice –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ —Å –µ—ë –ø—É–ª–∞–º–∏
    /// company => [pool1, pool2, ...]
    mapping(address => address[]) public poolsByCompany;

    /// @notice –°–æ–±—ã—Ç–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø—É–ª–∞
    /// @param pool –∞–¥—Ä–µ—Å –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –ø—É–ª–∞
    /// @param company –∞–¥—Ä–µ—Å –∫–æ–º–ø–∞–Ω–∏–∏, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π —Å–æ–∑–¥–∞–Ω –ø—É–ª
    /// @param shareToken –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞-–¥–æ–ª–∏ –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞
    /// @param index –∏–Ω–¥–µ–∫—Å –ø—É–ª–∞ –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ
    /// @param target —Ü–µ–ª–µ–≤–∞—è —Å—É–º–º–∞ —Å–±–æ—Ä–∞
    /// @param deadline –¥–µ–¥–ª–∞–π–Ω –ø–æ —Å–±–æ—Ä—É —Å—Ä–µ–¥—Å—Ç–≤
    event PoolCreated(
        address indexed pool,
        address indexed company,
        address indexed shareToken,
        uint256 index,
        uint256 target,
        uint256 deadline
    );

    /// @param usdt_ –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Ç–æ–∫–µ–Ω–∞ USDT
    /// @param admin_ –∞–¥—Ä–µ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–≤–ª–∞–¥–µ–ª—å—Ü–∞ —Ñ–∞–±—Ä–∏–∫–∏)
    constructor(address usdt_, address admin_) Ownable(admin_) {
        require(usdt_ != address(0), "USDT zero");   // –ø—Ä–æ–≤–µ—Ä–∫–∞: –∞–¥—Ä–µ—Å USDT –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω—É–ª–µ–≤—ã–º
        require(admin_ != address(0), "Admin zero"); // –ø—Ä–æ–≤–µ—Ä–∫–∞: –∞–¥—Ä–µ—Å –∞–¥–º–∏–Ω–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω—É–ª–µ–≤—ã–º
        usdt = usdt_;
        _transferOwnership(admin_); // –ø–µ—Ä–µ–¥–∞—ë–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞ –Ω–∞ –≤–Ω–µ—à–Ω–∏–π –∞–¥—Ä–µ—Å
    }

    /// @notice –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –ø—É–ª –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏
    /// @param companyWallet –∫–æ—à–µ–ª—ë–∫ –∫–æ–º–ø–∞–Ω–∏–∏, –ø–æ–ª—É—á–∞—é—â–µ–π —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —Å–±–æ—Ä–µ
    /// @param targetAmount —Ü–µ–ª—å —Å–±–æ—Ä–∞ –≤ USDT
    /// @param deadline –¥–∞—Ç–∞ (timestamp), –¥–æ –∫–æ—Ç–æ—Ä–æ–π –∏–¥—ë—Ç —Å–±–æ—Ä
    /// @param successReturnBps –ø—Ä–æ—Ü–µ–Ω—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ (–≤ –±–∞–∑–∏—Å–Ω—ã—Ö –ø—É–Ω–∫—Ç–∞—Ö, 10000 = 100%)
    /// @param failReturnBps –ø—Ä–æ—Ü–µ–Ω—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ (–≤ –±–∞–∑–∏—Å–Ω—ã—Ö –ø—É–Ω–∫—Ç–∞—Ö)
    /// @param tokenName –∏–º—è —Ç–æ–∫–µ–Ω–∞-–¥–æ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "HMP Token")
    /// @param tokenSymbol —Å–∏–º–≤–æ–ª —Ç–æ–∫–µ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "HMP")
    /// @param tokenDecimals –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π —É —Ç–æ–∫–µ–Ω–∞
    /// @return poolAddr –∞–¥—Ä–µ—Å —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø—É–ª–∞
    function createInvestmentPool(
        address companyWallet,
        uint256 targetAmount,
        uint256 deadline,
        uint16 successReturnBps,
        uint16 failReturnBps,
        string memory tokenName,
        string memory tokenSymbol,
        uint8 tokenDecimals,
        uint256 tokenPrice // üëà –Ω–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
    ) external onlyOwner returns (address poolAddr) {
        InvestmentPool pool = new InvestmentPool(
            usdt,
            owner(),
            companyWallet,
            targetAmount,
            deadline,
            successReturnBps,
            failReturnBps,
            tokenName,
            tokenSymbol,
            tokenDecimals,
            tokenPrice // üëà –ø–µ—Ä–µ–¥–∞—ë–º —Å—é–¥–∞
        );

        poolAddr = address(pool);

        // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ–±—â–∏–µ —Å–ø–∏—Å–∫–∏
        allPools.push(poolAddr);
        poolsByCompany[companyWallet].push(poolAddr);

        uint256 idx = allPools.length - 1;

        // –≤—ã–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤ –ª–æ–≥–∞—Ö –±–ª–æ–∫—á–µ–π–Ω–∞
        emit PoolCreated(
            poolAddr,
            companyWallet,
            address(pool.shareToken()), // —Ç–æ–∫–µ–Ω-–¥–æ–ª—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞
            idx,
            targetAmount,
            deadline
        );
    }

    /// @notice –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É–ª–æ–≤
    function totalPools() external view returns (uint256) {
        return allPools.length;
    }

    /// @notice –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–¥—Ä–µ—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø—É–ª–∞
    function latestPool() external view returns (address) {
        require(allPools.length > 0, "No pools"); // –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø—É–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        return allPools[allPools.length - 1];
    }

    /// @notice –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –ø—É–ª–æ–≤
    function getAllPools() external view returns (address[] memory) {
        return allPools;
    }

    /// @notice –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –ø—É–ª—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
    function getCompanyPools(address company) external view returns (address[] memory) {
        return poolsByCompany[company];
    }

    /// @notice –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É–ª–æ–≤, —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
    function poolsCountByCompany(address company) external view returns (uint256) {
        return poolsByCompany[company].length;
    }
}
