pragma solidity ^0.8.20;

import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/ReentrancyGuard.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";

import "./IUSDT.sol";
import "./InvestmentToken.sol";

/// @title InvestmentPool
/// @notice –ö–æ–Ω—Ç—Ä–∞–∫—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø—É–ª–∞ ‚Äî –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è —Å–±–æ—Ä–∞ —Å—Ä–µ–¥—Å—Ç–≤.
/// @dev –£–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º, –≤–æ–∑–≤—Ä–∞—Ç–∞–º–∏, –ø–µ—Ä–µ–≤–æ–¥–æ–º –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –≤—ã–ø–ª–∞—Ç–∞–º–∏ –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—è–º.
// SPDX-License-Identifier: MIT
contract InvestmentPool is Ownable, ReentrancyGuard {
    using SafeERC20 for IUSDT;

    enum State { Funding, Succeeded, Failed, Released }
    enum Scenario { SuccessPayout, FailurePartial }

    IUSDT public immutable usdt;
    InvestmentToken public immutable shareToken;
    uint256 public immutable targetAmount;
    uint256 public immutable deadline;
    address public immutable companyWallet;
    uint16 public immutable successReturnBps;
    uint16 public immutable failReturnBps;

    /// @notice –¶–µ–Ω–∞ –æ–¥–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –≤ USDT (—Å 6 –¥–µ—Å—è—Ç–∏—á–Ω—ã–º–∏ –∑–Ω–∞–∫–∞–º–∏)
    uint256 public immutable tokenPrice;

    State public state;
    bool public finalized;
    bool public successPayoutActive;
    bool public failPayoutActive;
    uint256 public totalInvested;

    address[] private _investors;
    mapping(address => bool) public isInvestor;
    mapping(address => uint256) public investedAmount;

    event InvestorAdded(address indexed investor);
    event Invested(address indexed investor, uint256 usdtAmount, uint256 tokensMinted, uint256 newTotal);
    event Finalized(State result);
    event ReleasedToCompany(address indexed company, uint256 amount);
    event Refunded(address indexed investor, uint256 amount);
    event ScenarioActivated(Scenario scenario, bool active);
    event ScenarioRedeemed(address indexed investor, Scenario scenario, uint256 burned, uint256 payout);
    event USDTDeposited(address indexed from, uint256 amount);

    constructor(
        address usdt_,
        address admin_,
        address companyWallet_,
        uint256 targetAmount_,
        uint256 deadline_,
        uint16 successReturnBps_,
        uint16 failReturnBps_,
        string memory tokenName_,
        string memory tokenSymbol_,
        uint8 tokenDecimals_,
        uint256 tokenPrice_ // üëà –¥–æ–±–∞–≤–∏–ª–∏ —Ü–µ–Ω—É —Ç–æ–∫–µ–Ω–∞
    ) Ownable(admin_) {
        require(usdt_ != address(0), "USDT zero");
        require(admin_ != address(0), "Admin zero");
        require(companyWallet_ != address(0), "Company zero");
        require(targetAmount_ > 0, "Target zero");
        require(deadline_ > block.timestamp, "Deadline past");
        require(tokenPrice_ > 0, "Price zero");

        usdt = IUSDT(usdt_);
        companyWallet = companyWallet_;
        targetAmount = targetAmount_;
        deadline = deadline_;
        successReturnBps = successReturnBps_;
        failReturnBps = failReturnBps_;
        tokenPrice = tokenPrice_; // üëà —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        state = State.Funding;

        shareToken = new InvestmentToken(tokenName_, tokenSymbol_, tokenDecimals_, address(this), admin_);
        _transferOwnership(admin_);
    }

    function invest(uint256 amount) external nonReentrant {
        require(state == State.Funding, "Not funding");
        require(block.timestamp < deadline, "Deadline passed");
        require(amount > 0, "Zero amount");

        // ‚úÖ amount –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –≤ ‚ÄúUSDT —Å 6 decimals‚Äù
        usdt.safeTransferFrom(msg.sender, address(this), amount);

        totalInvested += amount;
        investedAmount[msg.sender] += amount;

        if (!isInvestor[msg.sender]) {
            isInvestor[msg.sender] = true;
            _investors.push(msg.sender);
            emit InvestorAdded(msg.sender);
        }

        // ‚úÖ –ü–µ—Ä–µ—Å—á—ë—Ç —Ç–æ–∫–µ–Ω–æ–≤ —Å —É—á—ë—Ç–æ–º —Ä–∞–∑–Ω–∏—Ü—ã decimals
        // amount (6 decimals), tokenPrice (6 decimals), —Ç–æ–∫–µ–Ω = 18 decimals
        uint256 tokensToMint = (amount * 1e18) / tokenPrice;
        shareToken.mint(msg.sender, tokensToMint);

        emit Invested(msg.sender, amount, tokensToMint, totalInvested);
    }


    // ================= –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è =================

    /// @notice –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–±–æ—Ä ‚Äî –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –ª–∏ —Ü–µ–ª—å
    function finalize() external {
        finalized = true;

        if (totalInvested >= targetAmount) {
            state = State.Succeeded;  // —Ü–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞
        } else {
            state = State.Failed;     // —Ü–µ–ª—å –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞
        }

        emit Finalized(state);
    }


    /// @notice –ü–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –∫–æ–º–ø–∞–Ω–∏–∏ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —Å–±–æ—Ä–µ
    /// @dev –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å
    function releaseToCompany() external onlyOwner nonReentrant {
        require(finalized, "Not finalized");
        require(state == State.Succeeded, "Not succeeded");

        uint256 bal = usdt.balanceOf(address(this));
        require(bal > 0, "No funds");

        usdt.safeTransfer(companyWallet, bal);
        state = State.Released;

        emit ReleasedToCompany(companyWallet, bal);
    }

    /// @notice –í–æ–∑–≤—Ä–∞—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –ø—Ä–∏ –Ω–µ—É–¥–∞—á–Ω–æ–º —Å–±–æ—Ä–µ (1:1)
    function refund() external nonReentrant {

        uint256 tokenAmt = shareToken.balanceOf(msg.sender);
        require(tokenAmt > 0, "No tokens");

        // ‚úÖ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç –≤ USDT (–æ–±—Ä–∞—Ç–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ invest)
        uint256 refundAmount = (tokenAmt * tokenPrice) / 1e18;

        shareToken.poolBurn(msg.sender, tokenAmt);
        usdt.safeTransfer(msg.sender, refundAmount);

        emit Refunded(msg.sender, refundAmount);
    }

    /// @notice –ê–¥–º–∏–Ω –º–æ–∂–µ—Ç –≤–Ω–µ—Å—Ç–∏ USDT –Ω–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –¥–ª—è –±—É–¥—É—â–∏—Ö –≤—ã–ø–ª–∞—Ç –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞–º (–≤—ã–∫—É–ø –∏–ª–∏ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è)
    function depositUSDT(uint256 amount) external onlyOwner {
        require(amount > 0, "Zero amount");
        usdt.safeTransferFrom(msg.sender, address(this), amount);
        emit USDTDeposited(msg.sender, amount);
    }

    /// @notice –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π —É—Å–ø–µ—Ö–∞ (–≤—ã–ø–ª–∞—Ç—ã –ø—Ä–∏–±—ã–ª–∏)
    function setSuccessPayoutActive(bool active) external onlyOwner {
        successPayoutActive = active;
        emit ScenarioActivated(Scenario.SuccessPayout, active);
    }

    /// @notice –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—Ç–∞ (–ø—Ä–∏ —É–±—ã—Ç–∫–µ –∫–æ–º–ø–∞–Ω–∏–∏)
    function setFailPayoutActive(bool active) external onlyOwner {
        failPayoutActive = active;
        emit ScenarioActivated(Scenario.FailurePartial, active);
    }

    /// @notice –°–∂–µ—á—å –≤—Å–µ —Ç–æ–∫–µ–Ω—ã –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞ –ø–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º—É —Å—Ü–µ–Ω–∞—Ä–∏—é (—É—Å–ø–µ—Ö / –Ω–µ—É–¥–∞—á–∞)
    function burnByScenario(Scenario scenario) external nonReentrant {
        uint256 bal = shareToken.balanceOf(msg.sender);
        _burnByScenario(scenario, bal);
    }

    /// @notice –°–∂–µ—á—å —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—é
    function burnByScenarioAmount(Scenario scenario, uint256 amount) external nonReentrant {
        _burnByScenario(scenario, amount);
    }

    /// @dev –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –≤—ã–ø–ª–∞—Ç—ã –∏ —Å–∂–∏–≥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
    function _burnByScenario(Scenario scenario, uint256 tokenAmt) internal {
        require(tokenAmt > 0, "Zero burn");
        require(shareToken.balanceOf(msg.sender) >= tokenAmt, "Insufficient tokens");

        // ‚úÖ —Å–Ω–∞—á–∞–ª–∞ —Å—á–∏—Ç–∞–µ–º –±–∞–∑–æ–≤—É—é USDT —Å—É–º–º—É –ø–æ —Ü–µ–Ω–µ —Ç–æ–∫–µ–Ω–∞
        uint256 baseAmountUSDT = (tokenAmt * tokenPrice) / 1e18;

        uint256 payout;
        if (scenario == Scenario.SuccessPayout) {
            payout = (tokenAmt * tokenPrice) / 1e18;
        } else if (scenario == Scenario.FailurePartial) {
            payout = (tokenAmt * tokenPrice) / 1e18;
        } else {
            revert("Invalid scenario");
        }

        require(usdt.balanceOf(address(this)) >= payout, "Insufficient pool USDT");

        shareToken.poolBurn(msg.sender, tokenAmt);
        usdt.safeTransfer(msg.sender, payout);

        emit ScenarioRedeemed(msg.sender, scenario, tokenAmt, payout);
    }

    // ================= –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ =================

    /// @notice –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–∫—Ä—ã—Ç –ª–∏ —Å–±–æ—Ä
    function isFundingOpen() public view returns (bool) {
        return state == State.Funding && block.timestamp < deadline;
    }

    /// @notice –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –ª–∏ —Ü–µ–ª—å –ø–æ —Å–±–æ—Ä—É
    function goalReached() public view returns (bool) {
        return totalInvested >= targetAmount;
    }

    /// @notice –ú–æ–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏ –∫–æ–º–ø–∞–Ω–∏–∏
    function canRelease() external view returns (bool) {
        return finalized && state == State.Succeeded;
    }

    /// @notice –ú–æ–∂–Ω–æ –ª–∏ –¥–µ–ª–∞—Ç—å –≤–æ–∑–≤—Ä–∞—Ç –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞–º
    function canRefund() external view returns (bool) {
        return true;
    }

    /// @notice –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞
    function timeLeft() external view returns (uint256) {
        if (block.timestamp >= deadline) return 0;
        return deadline - block.timestamp;
    }

    /// @notice –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–±–æ—Ä–∞ (–≤ bps, 10000 = 100%)
    function progressBps() external view returns (uint256) {
        if (targetAmount == 0) return 0;
        uint256 p = (totalInvested * 10_000) / targetAmount;
        if (p > 10_000) return 10_000;
        return p;
    }

    /// @notice –°–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –¥–æ —Ü–µ–ª–∏
    function remainingToTarget() external view returns (uint256) {
        return totalInvested >= targetAmount ? 0 : (targetAmount - totalInvested);
    }

    /// @notice –ë–∞–ª–∞–Ω—Å USDT –Ω–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ –ø—É–ª–∞
    function poolUSDTBalance() external view returns (uint256) {
        return usdt.balanceOf(address(this));
    }

    /// @notice –ë–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤ –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞
    function investorTokenBalance(address account) external view returns (uint256) {
        return shareToken.balanceOf(account);
    }

    /// @notice –ü—Ä–æ—Å–º–æ—Ç—Ä –≤–æ–∑–º–æ–∂–Ω–æ–π –≤—ã–ø–ª–∞—Ç—ã –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—é (–Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–µ—Ä–µ–≤–æ–¥)
    function previewPayout(address account, Scenario scenario, uint256 tokenAmt)
    external
    view
    returns (uint256 payout)
    {
        uint256 bal = shareToken.balanceOf(account);
        if (tokenAmt == 0 || tokenAmt > bal) tokenAmt = bal;

        uint256 baseAmountUSDT = (tokenAmt * tokenPrice) / 1e18;

        if (scenario == Scenario.SuccessPayout) {
            payout = (baseAmountUSDT * uint256(successReturnBps)) / 10_000;
        } else if (scenario == Scenario.FailurePartial) {
            payout = (baseAmountUSDT * uint256(failReturnBps)) / 10_000;
        } else {
            payout = 0;
        }
    }


    /// @notice –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤ –ø—É–ª–∞
    function investors() external view returns (address[] memory) {
        return _investors;
    }

    /// @notice –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤
    function investorsCount() external view returns (uint256) {
        return _investors.length;
    }
}
